server.port: 7003
server.error.include-message: always

# Strongly recommend to set this property to "none" in a production environment!
spring.jpa.hibernate.ddl-auto: none

logging:
  level:
    root: INFO
    com.example: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

spring:
  config:
    import: optional:file:.env[.properties]
  liquibase:
    enabled: true
    url: jdbc:postgresql://${REVIEW_POSTGRES_HOST_AND_PORT}/review-db
    user: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    change-log: classpath:db/changelog/db.changelog-master.yaml
  datasource:
    url: jdbc:postgresql://${REVIEW_POSTGRES_HOST_AND_PORT}/review-db
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    hikari.initializationFailTimeout: 60000
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect

# Spring Cloud SetUp
spring.cloud.function.definition: messageProcessor

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings.messageProcessor-in-0:
    destination: reviews
    group: reviewsGroup

spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
  maxAttempts: 3
  backOffInitialInterval: 500
  backOffMaxInterval: 1000
  backOffMultiplier: 2.0

spring.cloud.stream.rabbit.bindings.messageProcessor-in-0.consumer:

  autoBindDlq: true
  republishToDlq: true

spring.cloud.stream.kafka.bindings.messageProcessor-in-0.consumer:
  enableDlq: true

spring.cloud.stream.kafka.binder:
  brokers: ${KAFKA_HOST}
  defaultBrokerPort: ${KAFKA_PORT}

spring.rabbitmq:
  host: ${RABBITMQ_HOST}
  port: ${RABBITMQ_PORT}
  username: ${RABBITMQ_USERNAME}
  password: ${RABBITMQ_PASSWORD}


management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
---
spring.config.activate.on-profile: docker

server.port: 8080

spring:
  liquibase:
    user: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    url: jdbc:postgresql://postgres-review-db/review-db
    enabled: true
  datasource:
    url: jdbc:postgresql://postgres-review-db/review-db
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    name: review-db

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka

---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
  partitioned: true
  instanceCount: 2

---
spring.config.activate.on-profile: streaming_instance_0

spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
  instanceIndex: 0

---
spring.config.activate.on-profile: streaming_instance_1

spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
  instanceIndex: 1

---
spring.config.activate.on-profile: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
spring.kafka.bootstrap-servers: ${KAFKA_SERVER_BOOTSTRAP}
spring.cloud.stream.kafka.binder.replication-factor: 1
